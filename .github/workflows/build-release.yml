name: Build Release Binaries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Install dependencies (server)
      run: bun install --frozen-lockfile
      
    - name: Install dependencies (client)
      run: cd client && bun install --frozen-lockfile
      
    - name: Build client
      run: bun run build:client
      
    - name: Embed static files
      run: bun run embed-static
      
    - name: Build all platforms
      run: |
        mkdir -p dist
        bun build --compile --minify --target=bun-linux-x64 --outfile=dist/gowa-manager-linux-x64 src/index.ts
        bun build --compile --minify --target=bun-linux-arm64 --outfile=dist/gowa-manager-linux-arm64 src/index.ts
        bun build --compile --minify --target=bun-darwin-x64 --outfile=dist/gowa-manager-macos-x64 src/index.ts
        bun build --compile --minify --target=bun-darwin-arm64 --outfile=dist/gowa-manager-macos-arm64 src/index.ts
        bun build --compile --minify --target=bun-windows-x64 --outfile=dist/gowa-manager-windows-x64.exe src/index.ts
    
    - name: Create checksums
      run: |
        cd dist
        sha256sum gowa-manager-* > checksums.txt
        cat checksums.txt
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gowa-manager-binaries
        path: |
          dist/gowa-manager-*
          dist/checksums.txt
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/gowa-manager-linux-x64
          dist/gowa-manager-linux-arm64
          dist/gowa-manager-macos-x64
          dist/gowa-manager-macos-arm64
          dist/gowa-manager-windows-x64.exe
          dist/checksums.txt
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## Installation
          
          Download the appropriate binary for your platform:
          
          **Linux (x64)**:
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/gowa-manager-linux-x64
          chmod +x gowa-manager-linux-x64
          ./gowa-manager-linux-x64
          ```
          
          **Linux (ARM64)**:
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/gowa-manager-linux-arm64
          chmod +x gowa-manager-linux-arm64
          ./gowa-manager-linux-arm64
          ```
          
          **macOS (Intel)**:
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/gowa-manager-macos-x64
          chmod +x gowa-manager-macos-x64
          ./gowa-manager-macos-x64
          ```
          
          **macOS (Apple Silicon)**:
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/gowa-manager-macos-arm64
          chmod +x gowa-manager-macos-arm64
          ./gowa-manager-macos-arm64
          ```
          
          **Windows (x64)**:
          Download `gowa-manager-windows-x64.exe` and run it.
          
          ## Usage
          
          **Basic usage:**
          ```bash
          ./gowa-manager-linux-x64
          ```
          
          **Custom port and credentials:**
          ```bash
          ./gowa-manager-linux-x64 --port 8080 --admin-username myuser --admin-password mypass
          ```
          
          **Custom data directory:**
          ```bash
          ./gowa-manager-linux-x64 --data-dir /path/to/data
          ```
          
          **Show help:**
          ```bash
          ./gowa-manager-linux-x64 --help
          ```
          
          Then open http://localhost:3000 in your browser (or custom port)
          
          ## Command Line Options
          
          - `-p, --port <port>`: Server port (default: 3000)
          - `-u, --admin-username <user>`: Admin username (default: admin)
          - `-P, --admin-password <pass>`: Admin password (default: password)
          - `-d, --data-dir <path>`: Data directory (default: ./data)
          - `-h, --help`: Show help message
          - `-v, --version`: Show version
          
          ## Environment Variables
          
          - `PORT`: Server port
          - `ADMIN_USERNAME`: Admin username
          - `ADMIN_PASSWORD`: Admin password
          - `DATA_DIR`: Data directory
          
          Note: Command line arguments take precedence over environment variables.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
